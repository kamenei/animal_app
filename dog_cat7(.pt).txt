!pip install -q pytorch_lightning==2.0.2
!unzip /content/dog_cat_data.zip

import torch
import torch.nn as nn
import pytorch_lightning as pl
from torchvision import datasets, models, transforms
from torch.utils.data import DataLoader
from PIL import Image
from glob import glob
from natsort import natsorted
from pytorch_lightning.callbacks import ModelCheckpoint
from torchmetrics.functional import accuracy

# Transforms for the training and testing data
# Add more transforms for data augmentation
transform = transforms.Compose([
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# Load training dataset
train_dataset = datasets.ImageFolder('/content/dog_cat_data/train', transform)

# Load testing data
test_file_paths = natsorted(glob('/content/dog_cat_data/test/*jpg'))
test_dataset = [(transform(Image.open(path)), path.split('/')[-1].split('.')[0]) for path in test_file_paths]

# Create DataLoader for training and testing
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

# Define the neural network
class Net(pl.LightningModule):
    def __init__(self):
        super().__init__()
        resnet = models.resnet50(pretrained=True)   # Modified this line
        resnet.fc = nn.Linear(resnet.fc.in_features, 2)  # Binary classification (dogs and cats)
        self.model = resnet

    def forward(self, x):
        return self.model(x)

    def training_step(self, batch, batch_idx):
        x, y = batch
        y_hat = self(x)
        loss = nn.CrossEntropyLoss()(y_hat, y)
        self.log('train_loss', loss)
        self.log('train_acc', accuracy(y_hat.softmax(dim=-1), y, num_classes=2, top_k=1, task='multiclass'), on_step=True, on_epoch=True)
        return loss

    def configure_optimizers(self):
        optimizer = torch.optim.Adam(self.parameters(), lr=0.001)
        scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)
        return [optimizer], [scheduler]

# Train the model
model = Net()
trainer = pl.Trainer(max_epochs=30, accelerator="gpu", deterministic=False)
trainer.fit(model, train_loader)

torch.save(model.state_dict(), 'dog_cat7.pt')